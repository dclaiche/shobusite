{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Think\\\\shobu.com\\\\client\\\\src\\\\components\\\\Board.js\";\nimport React from 'react';\nimport { Component } from 'react';\nimport Square from './Square';\nimport socket from './../apis/port';\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Board extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.playerMove = index => {\n      if (this.state.p1_turn === this.state.isPlayer_one && this.state.grid[index] === 0) {\n        if (this.state.isPlayer_one) {\n          socket.emit(\"player-move\", index, 1);\n        } else {\n          socket.emit(\"player-move\", index, -1);\n        }\n      }\n    };\n\n    this.render = () => {\n      const gamestate = this.props.gamestate;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: gamestate.grid.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(Square, {\n            val: value.toString(),\n            index: index,\n            gamestate: {\n              isPlayer_one: this.props.isPlayer_one,\n              ...gamestate\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 28\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this);\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Think/shobu.com/client/src/components/Board.js"],"names":["React","Component","Square","socket","Board","playerMove","index","state","p1_turn","isPlayer_one","grid","emit","render","gamestate","props","map","value","toString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,eAAe,MAAMC,KAAN,SAAoBH,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAIzCI,UAJyC,GAI5BC,KAAK,IAAI;AAClB,UAAG,KAAKC,KAAL,CAAWC,OAAX,KAAuB,KAAKD,KAAL,CAAWE,YAAlC,IACI,KAAKF,KAAL,CAAWG,IAAX,CAAgBJ,KAAhB,MAAyB,CADhC,EACkC;AAC1B,YAAG,KAAKC,KAAL,CAAWE,YAAd,EAA2B;AACvBN,UAAAA,MAAM,CAACQ,IAAP,CAAY,aAAZ,EAA2BL,KAA3B,EAAkC,CAAlC;AACH,SAFD,MAGI;AACAH,UAAAA,MAAM,CAACQ,IAAP,CAAY,aAAZ,EAA2BL,KAA3B,EAAkC,CAAC,CAAnC;AACH;AACR;AACJ,KAdwC;;AAAA,SAiBzCM,MAjByC,GAiBhC,MAAM;AAEX,YAAMC,SAAS,GAAG,KAAKC,KAAL,CAAWD,SAA7B;AAEA,0BACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA,kBACKA,SAAS,CAACH,IAAV,CAAeK,GAAf,CAAmB,CAACC,KAAD,EAAOV,KAAP,KAAiB;AACjC,8BAAO,QAAC,MAAD;AAAQ,YAAA,GAAG,EAAEU,KAAK,CAACC,QAAN,EAAb;AAA2C,YAAA,KAAK,EAAEX,KAAlD;AAAyD,YAAA,SAAS,EAAE;AAACG,cAAAA,YAAY,EAAC,KAAKK,KAAL,CAAWL,YAAzB;AAAuC,iBAAGI;AAA1C;AAApE,aAAoCP,KAApC;AAAA;AAAA;AAAA;AAAA,kBAAP;AACH,SAFA;AADL;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH,KAjCwC;AAAA;;AAAA","sourcesContent":["import React from 'react';\r\nimport {Component} from 'react';\r\nimport Square from './Square';\r\nimport socket from './../apis/port';\r\n\r\n/*\r\ngameState = {            //packaged data sent to frontend\r\n    p1_name: \"\",\r\n    p2_name: \"\",\r\n    p1_score: 0,\r\n    p2_score: 0,\r\n    ties: 0,\r\n    p1_turn: true,\r\n    grid: [0,0,0,\r\n        0,0,0,\r\n        0,0,0]\r\n\r\n}\r\n*/\r\n\r\n\r\nexport default class Board extends Component {\r\n    \r\n    \r\n    \r\n    playerMove = index => {\r\n        if(this.state.p1_turn === this.state.isPlayer_one\r\n            && this.state.grid[index]===0){\r\n                if(this.state.isPlayer_one){\r\n                    socket.emit(\"player-move\", index, 1);\r\n                }\r\n                else{\r\n                    socket.emit(\"player-move\", index, -1);\r\n                }\r\n        }\r\n    }\r\n\r\n//note to self, when prop is changed state is not changed\r\n    render = () => {\r\n        \r\n        const gamestate = this.props.gamestate;\r\n    \r\n        return (\r\n            <div className=\"board\">\r\n                {gamestate.grid.map((value,index) => {\r\n                    return <Square val={value.toString()} key={index} index={index} gamestate={{isPlayer_one:this.props.isPlayer_one, ...gamestate}}/>\r\n                }) }\r\n\r\n            \r\n                \r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}